#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Feb 21 08:55:39 2020

@author: mitch
"""
import pickle
import numpy as np
import matplotlib.pyplot as plt
from collections import defaultdict


def newton(f,fp,a,tol=1e-6,max_iter = 50):
    cnt = 0
    point = a
    error = 10
    while abs(error)>tol:
        if cnt>max_iter:
            return None
        if abs(fp(point)) == 0:
            return None
            #raise ZeroDivisionError
        
        new_point = point - f(point)/fp(point)
        error = point - new_point
        point = new_point
        cnt+=1
        
    return point



def fuzzy_equal(a,b,tol = 1e-6):
    return abs(a-b)<tol


def f(x):
    return x**5-4*x**3+2*x-1


def fp(x):
    return 5*x**4-12*x**2+2

def zero_index(f,fp,x,zero_list):
    sol = newton(f,fp,x)
    if sol is None:
        return -1
    for i,zero in enumerate(zero_list):
        if fuzzy_equal(zero,sol):
            return i
        
def miles(x):
    return np.sin(x)

def milesp(x):
    return np.cos(x)


def make_basins(f,fp,a,b,N):
    
    tol = 1e-12
   
    roots = []
    
    for row in np.linspace(a,b,100)+np.linspace(a,b,100).reshape((100,1))*1j:
        for point in row:
            sol = newton(f,fp,point,tol)
            if sol is None:
                continue
            if not any([fuzzy_equal(root,sol) for root in roots]):
                roots.append(sol)

    return np.vectorize(lambda x: zero_index(f,fp,x,roots))(np.linspace(a,b,N)+np.linspace(a,b,N).reshape((N,1))*1j)
    #return np.vectorize(lambda x: newton(f,fp,x,tol))(np.linspace(a,b,N)+np.linspace(a,b,N).reshape((N,1))*1j)
                


def f1(x):
    return x**4-3*x**2+2


def f1p(x):
    return 4*x**3-6*x


def id_num(x):
    return 6+7*x+3*x**2+9*x**3+0*x**4+2*x**5+x**6


def id_num_p(x):
    return 7+6*x+27*x**2+0*x**3+10*x**4+6*x**5

if __name__ == "__main__":

    a = -2
    b = 2
    
    xmin, xmax = xlim = a, b
    ymin, ymax = ylim = a, b


    #x = np.linspace(a,b,1000)
    #y = id_num(x)
    
    #plt.plot(x,y)


    
    
    converge = make_basins(miles,milesp,-2,2,500)


    fig,ax = plt.subplots(figsize=(10,10))
    
    ax.set(xlim=xlim, ylim=ylim, autoscale_on=False)
    
    ax.imshow(converge, extent=(0, 1, 0, 1), transform=ax.transAxes)
    
    fig.savefig("miles.pdf")
    
    #fig.savefig("id_basins.pdf")
    
    
    #for root in converge:
    #    ax.plot(converge[root].real,converge[root].imag,'.',label=root)
    #ax.legend()
    #fig.savefig("basins.pdf")


#    with open("id_fun.dat","wb") as d:
#        pickle.dump(converge,d)





